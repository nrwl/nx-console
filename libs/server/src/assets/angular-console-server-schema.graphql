type Architect {
  name: String!
  project: String!
  builder: String!
  description: String!
  options: Options!
  configurations: [ArchitectConfigurations!]!
  schema: [Schema!]!
}

type Options {
  defaultValues: [FieldValue!]!
}

type ArchitectConfigurations {
  name: String!
  defaultValues: [FieldValue!]!
}

type CommandResponse {
  id: String!
  workspace: String
  command: String!
  status: String!
  detailedStatus: String
  outChunk: String!
  out: String!
}

type CommandStarted {
  id: String!
}

type CompletionResultType {
  value: String!
  display: String
}

type CompletionsTypes {
  files(input: String!): [CompletionResultType!]!
  projects(input: String!): [CompletionResultType!]!
  localModules(input: String!): [CompletionResultType!]!
  absoluteModules(input: String!): [CompletionResultType!]!
}

type Query {
  settings: Settings!
  schematicCollections: [SchematicCollectionForNgNew!]!
  workspace(path: String!): Workspace!
  editors: [EditorSupport!]!
  availableExtensions(name: String): [Extension!]!
  isNodejsInstalled: IsNodeInstalledResult
  commands(id: String, cols: Int): [CommandResponse!]!
}

type Dependencies {
  name: String!
  version: String!
}

type EditorSupport {
  name: String!
  icon: String!
}

type Extension {
  name: String!
  description: String!
  detailedDescription: String
  installed: Boolean
}

type IsNodeInstalledResult {
  result: Boolean!
}

type OpenInBrowserResult {
  result: Boolean!
}

type ShowItemInFolderResult {
  result: Boolean!
}

type OpenDocResult {
  result: Boolean!
}

type Mutation {
  ngAdd(path: String!, name: String!): CommandStarted
  ngNew(
    path: String!
    name: String!
    collection: String!
    newCommand: [String!]!
  ): CommandStarted
  generate(
    path: String!
    genCommand: [String!]!
    dryRun: Boolean!
  ): CommandStarted
  generateUsingNpm(
    path: String!
    npmClient: String
    genCommand: [String!]!
    dryRun: Boolean!
  ): CommandStarted
  runNg(path: String!, runCommand: [String!]!): CommandStarted
  runNpm(
    path: String!
    npmClient: String
    runCommand: [String!]!
  ): CommandStarted
  stopCommand(id: String!): StopResult
  removeCommand(id: String!): RemoveResult
  removeAllCommands: RemoveResult
  restartCommand(id: String!): RemoveResult
  openInEditor(editor: String!, path: String!): OpenInEditor
  updateSettings(data: String!): Settings!
  saveRecentAction(
    workspacePath: String!
    projectName: String!
    actionName: String!
    schematicName: String
  ): [RecentAction!]!
  openInBrowser(url: String!): OpenInBrowserResult
  selectDirectory(
    dialogTitle: String!
    dialogButtonLabel: String!
    angularWorkspace: Boolean!
  ): SelectDirectoryResult
  showItemInFolder(item: String!): ShowItemInFolderResult
  openDoc(id: String!): OpenDocResult
}

type SelectDirectoryResult {
  selectedDirectoryPath: String
  error: String
}

type NpmScript {
  name: String!
  npmClient: String
  schema: [Schema!]!
}

type OpenInEditor {
  response: String!
}

type Project {
  name: String!
  root: String!
  projectType: String!
  architect(name: String): [Architect!]!
  recentActions: [RecentAction!]!
}

type RecentAction {
  actionName: String!
  schematicName: String
}

type Schematic {
  collection: String!
  name: String!
  description: String!
  npmClient: String
  npmScript: String
  schema: [Schema!]!
}

type SchematicCollection {
  name: String!
  schematics(name: String): [Schematic!]!
}

type SchematicCollectionForNgNew {
  name: String!
  description: String!
  schema: [Schema!]!
}

type FieldValue {
  name: String!
  defaultValue: String
}

type Schema {
  name: String!
  type: String!
  description: String!
  defaultValue: String
  important: Boolean
  completion: String
  required: Boolean!
  positional: Boolean!
  enum: [String!]
}

type StopResult {
  result: Boolean
}

type RemoveResult {
  result: Boolean
}

type WorkspaceDefinition {
  path: String!
  name: String!
  favorite: Boolean
  pinnedProjectNames: [String!]!
}

type Settings {
  canCollectData: Boolean!
  isConnectUser: Boolean
  disableAnimations: Boolean
  showSupportPlugin: Boolean
  installNodeManually: Boolean
  enableDetailedStatus: Boolean
  channel: String
  workspaceSchematicsDirectory: String
  workspaceSchematicsNpmScript: String
  recent: [WorkspaceDefinition!]!
  isWsl: Boolean
  isWindows: Boolean
  useNvm: Boolean
}

type Workspace {
  name: String!
  path: String!
  dependencies: [Dependencies!]!
  extensions: [Extension!]!
  schematicCollections(name: String): [SchematicCollection!]!
  npmScripts(name: String): [NpmScript!]!
  projects(name: String): [Project!]!
  docs: Docs!
  completions: CompletionsTypes
}

type Docs {
  workspaceDocs: [Doc!]!
  schematicDocs(
    collectionName: String!
    collectionVersion: String
    name: String!
  ): [Doc!]!
}

type Doc {
  prop: String
  description: String
  id: String!
}
