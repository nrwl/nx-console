{
  "name": "angular-console",
  "displayName": "Nx Console",
  "description": "The UI for Monorepos, providing visual workflows and enriching your AI Chat with deep insights",
  "version": "17.28.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nrwl/nx-console.git"
  },
  "author": {
    "name": "Narwhal Technologies Inc",
    "email": "hello@nrwl.io"
  },
  "publisher": "nrwl",
  "private": true,
  "main": "main.js",
  "icon": "assets/nx-console-logo-large.png",
  "galleryBanner": {
    "color": "#176BCC",
    "theme": "dark"
  },
  "homepage": "https://nx.dev/using-nx/console#nx-console-for-vscode",
  "bugs": {
    "url": "https://github.com/nrwl/nx-console/issues"
  },
  "license": "MIT",
  "engines": {
    "vscode": "^1.96.0"
  },
  "keywords": [
    "angular",
    "react",
    "cli",
    "monorepo",
    "nx",
    "lerna"
  ],
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "contributes": {
    "typescriptServerPlugins": [
      {
        "enableForWorkspaceTypeScriptVersions": true,
        "name": "@nx-console/vscode-typescript-import-plugin"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "isNxWorkspace && config.nxConsole.enableGenerateFromContextMenu",
          "command": "nx.generate.ui.fileexplorer",
          "group": "2_workspace"
        },
        {
          "when": "isNxWorkspace && config.nxConsole.enableGenerateFromContextMenu",
          "command": "nx.run.fileexplorer",
          "group": "2_workspace"
        },
        {
          "when": "isNxWorkspace && config.nxConsole.enableGenerateFromContextMenu",
          "command": "nx.move",
          "group": "7_modification@-1"
        },
        {
          "when": "isNxWorkspace && config.nxConsole.enableGenerateFromContextMenu",
          "command": "nx.remove",
          "group": "7_modification@-1"
        },
        {
          "when": "isNxWorkspace",
          "group": "2_workspace@5",
          "command": "nx.graph.focus"
        },
        {
          "when": "isNxWorkspace",
          "group": "2_workspace@5",
          "command": "nx.graph.task"
        }
      ],
      "view/title": [
        {
          "command": "nx.graph.showAll",
          "when": "view == nxProjects",
          "group": "navigation@0"
        },
        {
          "command": "nxConsole.refreshWorkspace",
          "when": "view == nxProjects",
          "group": "navigation@1"
        },
        {
          "command": "nxConsole.refreshWorkspace",
          "when": "view == nxRunTarget",
          "group": "navigation"
        },
        {
          "command": "nxConsole.editCommonCommands",
          "when": "view == nxCommands",
          "group": "navigation"
        },
        {
          "command": "nxCloud.refresh",
          "when": "view == nxCloudOnboarding || view == nxCloudLoading || view == nxCloudRecentCIPE",
          "group": "navigation"
        },
        {
          "command": "nxCloud.openApp",
          "when": "view == nxCloudRecentCIPE",
          "group": "navigation"
        },
        {
          "command": "nx.configureMcpServer",
          "when": "view == nxProjects && (isInCursor || isInVSCode) && isNxWorkspace && !hasNxMcpConfigured",
          "group": "navigation@0",
          "title": "Add Nx to Cursor Agent"
        },
        {
          "command": "nxMigrate.refresh",
          "when": "view == nxMigrate",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "nxConsole.showProjectConfiguration",
          "when": "view == nxProjects && (viewItem == project || viewItem == target || viewItem == target-atomized)",
          "group": "inline"
        },
        {
          "command": "nxConsole.revealInExplorer",
          "when": "view == nxProjects && (viewItem == project || viewItem == folder)",
          "group": "inline"
        },
        {
          "command": "nxConsole.run-task-projects-view",
          "when": "view == nxProjects && viewItem == target",
          "group": "inline"
        },
        {
          "command": "nxConsole.run-task-projects-view-options",
          "when": "view == nxProjects && viewItem == target",
          "group": "navigation@1"
        },
        {
          "command": "nxConsole.run-task-projects-view-skip-cache",
          "when": "view == nxProjects && viewItem == target",
          "group": "navigation@1"
        },
        {
          "command": "nxConsole.copyTaskToClipboard",
          "when": "view == nxProjects && viewItem == target",
          "group": "navigation@3"
        },
        {
          "command": "nxConsole.showAtomizerInfo",
          "when": "view == nxProjects && viewItem == target-atomized",
          "group": "inline@5"
        },
        {
          "command": "nx.graph.focus.button",
          "when": "view == nxProjects && viewItem == project && isNxWorkspace",
          "group": "inline@1"
        },
        {
          "command": "nx.graph.select.button",
          "when": "view == nxProjects && viewItem == project && isNxWorkspace",
          "group": "z_commands"
        },
        {
          "command": "nx.move.projectView",
          "when": "view == nxProjects && viewItem == project && isNxWorkspace",
          "group": "navigation@2"
        },
        {
          "command": "nx.remove.projectView",
          "when": "view == nxProjects && viewItem == project && isNxWorkspace",
          "group": "navigation@2"
        },
        {
          "command": "nx.generate.ui.projectView",
          "when": "view == nxProjects && viewItem == project && isNxWorkspace",
          "group": "navigation@1"
        },
        {
          "command": "nx.graph.task.button",
          "when": "view == nxProjects && (viewItem == target || viewItem == target-atomized) && isNxWorkspace",
          "group": "inline@1"
        },
        {
          "command": "nx.generate.quickpick",
          "when": "view == nxCommands && viewItem == generate && isNxWorkspace",
          "group": "inline@1"
        },
        {
          "command": "nxCloud.showCIPEInApp",
          "when": "view == nxCloudRecentCIPE && viewItem =~ /^cipe/",
          "group": "inline@1"
        },
        {
          "command": "nxCloud.showCommitForCIPE",
          "when": "view == nxCloudRecentCIPE && viewItem == cipe-commit",
          "group": "inline"
        },
        {
          "command": "nxCloud.showRunInApp",
          "when": "view == nxCloudRecentCIPE && viewItem == run",
          "group": "inline@1"
        },
        {
          "command": "nxCloud.explainCipeTaskFailure",
          "when": "view == nxCloudRecentCIPE && viewItem == failedTask && github.copilot-chat.activated",
          "group": "inline@1"
        },
        {
          "command": "nxCloud.helpMeFixCipeError",
          "when": "view == nxCloudRecentCIPE && viewItem == failedTask && isInCursor",
          "group": "inline@1"
        },
        {
          "command": "nxConsole.showProblems",
          "when": "view == nxProjects && viewItem == projectGraphError",
          "group": "inline@1"
        }
      ],
      "editor/title": [
        {
          "command": "nxConsole.refreshWorkspace",
          "group": "navigation",
          "when": "graphWebviewVisible || projectDetailsViewVisible"
        },
        {
          "command": "nx.project-details.openToSide",
          "group": "navigation",
          "when": "resourcePath in nxConsole.pdvPaths && config.nxConsole.showProjectDetailsView"
        }
      ],
      "commandPalette": [
        {
          "command": "nx.generate.ui.fileexplorer",
          "when": "false"
        },
        {
          "command": "nx.generate.ui.projectView",
          "when": "false"
        },
        {
          "command": "nxConsole.run-task-projects-view",
          "when": "false"
        },
        {
          "command": "nxConsole.run-task-projects-view-skip-cache",
          "when": "false"
        },
        {
          "command": "nxConsole.run-task-projects-view-options",
          "when": "false"
        },
        {
          "command": "nxConsole.copyTaskToClipboard",
          "when": "false"
        },
        {
          "command": "nxConsole.revealInExplorer",
          "when": "false"
        },
        {
          "command": "nxConsole.showAtomizerInfo",
          "when": "false"
        },
        {
          "command": "nxConsole.migrateAngularCliToNx",
          "when": "isAngularWorkspace && !isNxWorkspace"
        },
        {
          "command": "nx.run.target",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.generate.quickpick",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.graph.focus",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.graph.select",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.graph.task",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.graph.task.button",
          "when": "false"
        },
        {
          "command": "nx.graph.focus.button",
          "when": "false"
        },
        {
          "command": "nx.graph.select.button",
          "when": "false"
        },
        {
          "command": "nx.move.projectView",
          "when": "false"
        },
        {
          "command": "nx.remove.projectView",
          "when": "false"
        },
        {
          "command": "nxCloud.showCIPEInApp",
          "when": "false"
        },
        {
          "command": "nxCloud.showCommitForCIPE",
          "when": "false"
        },
        {
          "command": "nxCloud.showRunInApp",
          "when": "false"
        },
        {
          "command": "nxCloud.explainCipeTaskFailure",
          "when": "false"
        },
        {
          "command": "nxCloud.helpMeFixCipeError",
          "when": "false"
        },
        {
          "command": "nx.run-many",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.run",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.affected",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.affected.test",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.affected.build",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.affected.e2e",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.affected.lint",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.list",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.generate.ui",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.run.fileexplorer",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.move",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.remove",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.init",
          "when": "!isNxWorkspace"
        },
        {
          "command": "nx.graph.showAll",
          "when": "isNxWorkspace"
        },
        {
          "command": "nxConsole.refreshWorkspace",
          "when": "isNxWorkspace"
        },
        {
          "command": "nxConsole.showProjectConfiguration",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.project-details.openToSide",
          "when": "isNxWorkspace"
        },
        {
          "command": "nxConsole.showNxlsLogs",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.connectToCloud",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.graph.showAffected",
          "when": "isNxWorkspace"
        },
        {
          "command": "nx.configureMcpServer",
          "when": "isNxWorkspace && !hasNxMcpConfigured && (isInCursor || isInVSCode)"
        }
      ]
    },
    "chatParticipants": [
      {
        "id": "nx-console.nx",
        "fullName": "Nx",
        "name": "nx",
        "description": "Get insights into your Nx workspace",
        "isSticky": true,
        "commands": [
          {
            "name": "generate",
            "description": "Run Nx generators"
          },
          {
            "name": "explain-cipe",
            "description": "Explain the CI pipeline execution failure"
          },
          {
            "name": "fill-generate-ui",
            "description": "Fill the Nx generate UI with options",
            "isSticky": false,
            "when": "nxConsole.isFillingGenerateUi == true"
          }
        ],
        "disambiguation": [
          {
            "category": "nx",
            "description": "The user wants to include context-aware insights using their Nx monorepo.",
            "examples": [
              "Tell me about my nx workspace",
              "What libraries exist in my workspace?",
              "Find a core components library and create a new Dialog component.",
              "Remove the deprecated properties from the Auth API and update all clients.",
              "What is the impact of merging 'ui-common' and 'ui-core'?",
              "Compare the retry logic in all data access libraries for the shop app",
              "Show me all the core projects"
            ]
          }
        ]
      }
    ],
    "languageModelTools": [
      {
        "name": "nx_cipe-details",
        "canBeReferencedInPrompt": false,
        "displayName": "CI Pipeline Execution Detail Extractor",
        "tags": [
          "nx"
        ],
        "toolReferenceName": "nxCipeDetails",
        "modelDescription": "Extracts runId and taskId from a users prompt",
        "inputSchema": {
          "type": "object",
          "properties": {
            "linkId": {
              "type": [
                "string",
                "null"
              ],
              "description": "The link ID of the CI pipeline."
            },
            "executionId": {
              "type": [
                "string",
                "null"
              ],
              "description": "The execution ID of the CI pipeline."
            },
            "taskId": {
              "type": "string"
            },
            "error": {
              "type": [
                "string",
                "null"
              ],
              "description": "An error message if the runId or taskId cannot be determined, or null if they can be determined."
            }
          },
          "required": [
            "runId",
            "taskId",
            "error"
          ]
        }
      },
      {
        "name": "nx_generator-details",
        "modelDescription": "View detailed information about an Nx generator",
        "displayName": "Generator Details",
        "tags": [
          "nx"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {
            "generatorName": {
              "type": "string",
              "description": "The name of the generator to get details for."
            }
          },
          "required": [
            "generatorName"
          ]
        }
      },
      {
        "name": "nx_project-details",
        "tags": [
          "nx"
        ],
        "toolReferenceName": "nxProjectDetails",
        "displayName": "Project Details",
        "modelDescription": "Retrieves a specific nx project configuration. Includes details like project targets/tasks and their details, type, tags, and dependencies and other metadata.",
        "icon": "$(file-code)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectName": {
              "type": "string",
              "description": "The name of the project to get details for."
            }
          },
          "required": [
            "projectName"
          ]
        }
      },
      {
        "name": "nx_visualize-project-graph-project",
        "tags": [
          "nx"
        ],
        "toolReferenceName": "nxVisualizeProjectGraph",
        "displayName": "Visualize Project Graph",
        "modelDescription": "Opens the Nx project graph visualization focused on a specific project. Helps to understand project dependencies and relationships.",
        "icon": "$(target)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectName": {
              "type": "string",
              "description": "The name of the project to focus on in the graph."
            }
          },
          "required": [
            "projectName"
          ]
        }
      },
      {
        "name": "nx_visualize-task-graph",
        "tags": [
          "nx"
        ],
        "toolReferenceName": "nxVisualizeTaskGraph",
        "displayName": "Visualize Task Graph",
        "modelDescription": "Opens the Nx task graph visualization focused on a specific project and task. Helps to understand task dependencies.",
        "icon": "$(target)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "projectName": {
              "type": "string",
              "description": "The name of the project containing the task."
            },
            "taskName": {
              "type": "string",
              "description": "The name of the task to focus on in the graph."
            }
          },
          "required": [
            "projectName",
            "taskName"
          ]
        }
      },
      {
        "name": "nx_available-plugins",
        "modelDescription": "Lists available Nx plugins, including official and local workspace plugins. Use this to answer questions about nx plugins or integrations.",
        "displayName": "Available Nx Plugins",
        "icon": "$(plug)",
        "toolReferenceName": "nxAvailablePlugins",
        "tags": [
          "nx"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {}
        }
      },
      {
        "name": "nx_open-generate-ui",
        "modelDescription": "Opens the Nx generate UI with prefilled options",
        "displayName": "Nx Generate UI",
        "icon": "$(window)",
        "tags": [
          "nx"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {
            "generatorName": {
              "type": "string",
              "description": "The name of the generator to open in the UI."
            },
            "options": {
              "type": "object",
              "description": "The options to prefill in the UI.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "cwd": {
              "type": "string",
              "description": "The current working directory to use for the generator. Relative to the nx workspace root. If not specified, will default to the nx workspace root."
            }
          },
          "required": [
            "generatorName",
            "options"
          ]
        }
      },
      {
        "name": "nx_visualize-full-project-graph",
        "tags": [
          "nx"
        ],
        "modelDescription": "Visualizes the entire Nx project graph for the workspace",
        "icon": "$(source-control)",
        "displayName": "Nx Full Project Graph",
        "toolReferenceName": "nxVisualizeFullProjectGraph",
        "inputSchema": {
          "type": "object",
          "properties": {}
        }
      }
    ],
    "commands": [
      {
        "command": "nxConsole.refreshWorkspace",
        "title": "Refresh Workspace",
        "category": "Nx",
        "icon": "$(refresh)"
      },
      {
        "command": "nxConsole.selectWorkspaceManually",
        "title": "Select Nx Workspace Location",
        "category": "Nx",
        "icon": "$(folder-opened)"
      },
      {
        "command": "nxConsole.editCommonCommands",
        "title": "Edit Common Commands",
        "icon": "$(pencil)"
      },
      {
        "command": "nxConsole.showProjectConfiguration",
        "title": "Show Project Configuration",
        "category": "Nx",
        "icon": "$(go-to-file)"
      },
      {
        "command": "nxConsole.revealInExplorer",
        "title": "Reveal in Explorer",
        "icon": "$(folder)"
      },
      {
        "command": "nxConsole.run-task-projects-view",
        "title": "Execute task",
        "icon": "$(play)"
      },
      {
        "command": "nxConsole.run-task-projects-view-skip-cache",
        "title": "Execute Task Without Nx Cache"
      },
      {
        "command": "nxConsole.run-task-projects-view-options",
        "title": "Execute Task With Options"
      },
      {
        "command": "nxConsole.copyTaskToClipboard",
        "title": "Copy Task to Clipboard"
      },
      {
        "category": "Nx",
        "title": "Run Target",
        "command": "nx.run.target"
      },
      {
        "category": "Nx",
        "title": "Generate (Quickpick)",
        "command": "nx.generate.quickpick",
        "icon": "$(terminal)"
      },
      {
        "category": "Nx",
        "title": "Focus Project in Nx Graph",
        "command": "nx.graph.focus"
      },
      {
        "category": "Nx",
        "title": "Select/Deselect in Nx Graph",
        "command": "nx.graph.select"
      },
      {
        "category": "Nx",
        "title": "Focus Task in Nx Graph",
        "command": "nx.graph.task"
      },
      {
        "category": "Nx",
        "title": "Focus Task in Nx Graph",
        "command": "nx.graph.task.button",
        "icon": "$(target)"
      },
      {
        "category": "Nx",
        "title": "Focus in Nx Graph",
        "command": "nx.graph.focus.button",
        "icon": "$(target)"
      },
      {
        "category": "Nx",
        "title": "Select/Deselect in Nx Graph",
        "command": "nx.graph.select.button",
        "icon": "$(eye)"
      },
      {
        "category": "Nx",
        "title": "Show Full Project Graph",
        "command": "nx.graph.showAll",
        "icon": "$(source-control)"
      },
      {
        "category": "Nx",
        "title": "Show Affected Project Graph",
        "command": "nx.graph.showAffected",
        "icon": "$(source-control)"
      },
      {
        "category": "Nx",
        "title": "Open Project Details to Side",
        "command": "nx.project-details.openToSide",
        "icon": "$(open-preview)"
      },
      {
        "category": "Nx",
        "title": "run-many",
        "command": "nx.run-many"
      },
      {
        "category": "Nx",
        "title": "run",
        "command": "nx.run"
      },
      {
        "category": "Nx",
        "title": "affected",
        "command": "nx.affected"
      },
      {
        "category": "Nx",
        "title": "affected test",
        "command": "nx.affected.test"
      },
      {
        "category": "Nx",
        "title": "affected build",
        "command": "nx.affected.build"
      },
      {
        "category": "Nx",
        "title": "affected e2e",
        "command": "nx.affected.e2e"
      },
      {
        "category": "Nx",
        "title": "affected lint",
        "command": "nx.affected.lint"
      },
      {
        "category": "Nx",
        "title": "list",
        "command": "nx.list"
      },
      {
        "category": "Nx",
        "title": "Generate (UI)",
        "command": "nx.generate.ui",
        "icon": "$(browser)"
      },
      {
        "category": "Nx",
        "title": "Nx Generate (UI)",
        "command": "nx.generate.ui.fileexplorer"
      },
      {
        "category": "Nx",
        "title": "Nx Generate (UI)",
        "command": "nx.generate.ui.projectView"
      },
      {
        "category": "Nx",
        "title": "Move Nx Project",
        "command": "nx.move"
      },
      {
        "category": "Nx",
        "title": "Remove Nx Project",
        "command": "nx.remove"
      },
      {
        "category": "Nx",
        "title": "Move Nx Project",
        "command": "nx.move.projectView"
      },
      {
        "category": "Nx",
        "title": "Remove Nx Project",
        "command": "nx.remove.projectView"
      },
      {
        "category": "Nx",
        "title": "Run Target From Selected File",
        "command": "nx.run.fileexplorer"
      },
      {
        "category": "Nx",
        "title": "Convert Angular CLI to Nx Workspace",
        "command": "nxConsole.migrateAngularCliToNx"
      },
      {
        "category": "Nx",
        "title": "Show Nx Language Server Logs",
        "command": "nxConsole.showNxlsLogs"
      },
      {
        "title": "Add Dependency to Workspace",
        "command": "nxConsole.addDependency"
      },
      {
        "title": "Add Dev Dependency to Workspace",
        "command": "nxConsole.addDevDependency"
      },
      {
        "category": "Nx",
        "title": "Add Nx to Workspace",
        "command": "nx.init"
      },
      {
        "category": "Nx",
        "title": "Connect to Nx Cloud",
        "command": "nx.connectToCloud"
      },
      {
        "title": "What is 'Atomizer'?",
        "command": "nxConsole.showAtomizerInfo",
        "icon": "$(question)"
      },
      {
        "title": "Refresh Nx Cloud View",
        "command": "nxCloud.refresh",
        "icon": "$(refresh)"
      },
      {
        "title": "Open CI Pipeline Execution in Browser",
        "command": "nxCloud.showCIPEInApp",
        "icon": "$(link-external)"
      },
      {
        "title": "Show Git Commit for this CI Pipeline Execution",
        "command": "nxCloud.showCommitForCIPE",
        "icon": "$(git-commit)"
      },
      {
        "title": "Open Run in Browser",
        "command": "nxCloud.showRunInApp",
        "icon": "$(link-external)"
      },
      {
        "title": "Open Workspace in Browser",
        "command": "nxCloud.openApp",
        "icon": "$(cloud)"
      },
      {
        "title": "Explain CIPE Task Failure",
        "command": "nxCloud.explainCipeTaskFailure",
        "icon": "$(copilot)"
      },
      {
        "title": "Help me fix the latest CIPE error",
        "command": "nxCloud.helpMeFixCipeError",
        "icon": {
          "dark": "assets/cursor-dark.svg",
          "light": "assets/cursor-light.svg"
        }
      },
      {
        "category": "Nx",
        "title": "Show Nx Errors in Problems View",
        "command": "nxConsole.showProblems",
        "icon": "$(eye)"
      },
      {
        "category": "Nx",
        "title": "Configure Nx MCP Server",
        "command": "nx.configureMcpServer",
        "icon": "$(wand)"
      },
      {
        "title": "Refresh Nx Migrate View",
        "command": "nxMigrate.refresh",
        "icon": "$(refresh)",
        "when": "isNxWorkspace"
      }
    ],
    "configuration": {
      "title": "Nx Console",
      "properties": {
        "nxConsole.commonNxCommands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "scope": "resource",
          "default": [
            "run",
            "run-many",
            "affected",
            "affected --graph",
            "list"
          ],
          "markdownDescription": "Common Nx commands that will be available in the sidebar view. You can specify either \n - Arbitrary Nx commands, like `build:example-app` or `nx run my-lib:test` (note that you can omit the prefixed `nx`) or  \n - Nx commands that are available through Nx Console, like `run-many`. They will be executed using the Nx Console UI."
        },
        "nxConsole.enableGenerateFromContextMenu": {
          "type": "boolean",
          "default": true,
          "description": "Shows or hides Nx Generate ui option from the file explorer context menu."
        },
        "nxConsole.enableCodeLens": {
          "type": "boolean",
          "default": true,
          "description": "Shows or hides CodeLens for Nx specific files."
        },
        "nxConsole.enableLibraryImports": {
          "type": "boolean",
          "default": true,
          "description": "Configures a TypeScript language server plugin to include configured libraries in root files for TypeScript projects. This allows for importing libraries into other libraries even when the import was not there before."
        },
        "nxConsole.enableGeneratorFilters": {
          "type": "boolean",
          "default": true,
          "description": "Enables the filter for listed generators with Nx Console."
        },
        "nxConsole.projectViewingStyle": {
          "type": "string",
          "default": "automatic",
          "enum": [
            "list",
            "tree",
            "automatic"
          ],
          "enumDescriptions": [
            "Shows the projects in an ordered list.",
            "Shows the projects in the same folder structure as they are located in your repo.",
            "Shows the projects in a tree if there are more than 10, otherwise shows them in a list."
          ],
          "description": "Define how the 'Projects' view shows the entries."
        },
        "nxConsole.generatorAllowlist": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "A list of generator names or wildcard patterns to show in the picker (can be combined with Generator Block List).\n\nThe name of the generator should be in this format: @package:generator.\n‎ ‎ ‎ ‎ ‎ examples: @nx/workspace:library, @nx/workspace:*, @nrwl*"
        },
        "nxConsole.generatorBlocklist": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "A list of generator names or wildcard patterns to hide in the picker (can be combined with Generator Allow List).\n\nThe name of the generator should be in this format: @package:generator.\n‎ ‎ ‎ ‎ ‎ examples: @nx/workspace:library, @nx/workspace:*, @nrwl*"
        },
        "nxConsole.enableTaskExecutionDryRunOnChange": {
          "type": "boolean",
          "default": true,
          "description": "Configures whether to do dry runs on change when using \"Generate\" command"
        },
        "nxConsole.moveGeneratorPatterns": {
          "type": "object",
          "scope": "resource",
          "default": {},
          "additionalProperties": {
            "type": "string"
          },
          "description": "Controls which collections (re)move generators will be used for a project matching a given wildcard pattern. \nIf a path matches multiple patterns, the last match will be used.\nIf a path matches no pattern, you can decide manually.\n Example: { \"libs/frontend/*\": \"@nx/angular\",  \"libs/backend/*\": \"@nx-dotnet\", }"
        },
        "nxConsole.showProjectDetailsView": {
          "type": "boolean",
          "scope": "application",
          "default": true,
          "description": "Show the project details view for project.json or package.json files."
        },
        "nxConsole.showNodeVersionOnStartup": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "description": "Show a notification with the current Node version on startup - useful for debugging nvm issues."
        },
        "nxConsole.nxWorkspacePath": {
          "type": "string",
          "description": "Specifies the relative path to the root directory of the Nx workspace. Can be configured on a user or workspace level."
        },
        "nxConsole.nxCloudNotifications": {
          "type": "string",
          "enum": [
            "all",
            "errors",
            "none"
          ],
          "enumDescriptions": [
            "Show all Nx Cloud notifications",
            "Show only error Nx Cloud notifications",
            "Show no Nx Cloud notifications"
          ],
          "default": "all",
          "description": "Controls which notifications are shown for Nx Cloud."
        }
      }
    },
    "problemMatchers": [
      {
        "name": "webpack-builder",
        "label": "TypeScript + Webpack Problem Matcher",
        "owner": "typescript",
        "source": "ts",
        "applyTo": "closedDocuments",
        "fileLocation": "absolute",
        "severity": "error",
        "pattern": [
          {
            "regexp": "\\[tsl\\] ERROR in (.*)?\\((\\d+),(\\d+)\\)",
            "file": 1,
            "line": 2,
            "column": 3
          },
          {
            "regexp": "\\s*TS\\d+:\\s*(.*)",
            "message": 1
          }
        ]
      }
    ],
    "taskDefinitions": [
      {
        "type": "nx",
        "required": [
          "project",
          "command"
        ],
        "properties": {
          "project": {
            "type": "string",
            "description": "The NX CLI project to run a command on"
          },
          "command": {
            "type": "string",
            "description": "The NX CLI command to run on the selected project"
          },
          "positional": {
            "type": "string",
            "description": "The project to run the command against"
          },
          "flags": {
            "type": "array",
            "description": "An array of flags to pass to the CLI"
          }
        }
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "nx-console",
          "title": "Nx Console",
          "icon": "tree-view-icon.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "nxConsole.views.welcome",
        "contents": "It looks like you're not inside an Nx workspace. Click the button below to add nx to your current workspace by running [nx init](https://nx.dev/recipes/adopting-nx/adding-to-existing-project). \n [Add Nx](command:nx.init)\n If your Nx workspace is in a different folder, you can manually select it below. \n[Select Workspace](command:nxConsole.selectWorkspaceManually)\nLearn more about Nx on [nx.dev](https://nx.dev) or check out the [Nx Console Documentation](https://nx.dev/getting-started/editor-setup)."
      },
      {
        "view": "nxConsole.views.angular-welcome",
        "contents": "Nx Console no longer supports Angular CLI workspaces.\nHowever, Nx now supports a [Standalone App workspace](https://nx.dev/getting-started/angular-standalone-tutorial) setup aimed at non-monorepo scenarios. This setup is identical to a typical Angular CLI workspace and allows for leveraging all Nx features, including:\n- [Modularizing your codebase](https://nx.dev/more-concepts/applications-and-libraries) with local libraries\n- [Powerful generators and plugins](https://nx.dev/plugin-features/use-code-generators) from the team and the Nx community (Jest, Cypress, Tailwind, Storybook, NgRx, etc.)\n- [Visualizing your workspace structure](https://nx.dev/core-features/explore-graph)\n- [Task caching](https://nx.dev/core-features/cache-task-results) to speed up your runs and CI\nFurthermore, if you ever want to migrate to a monorepo, it can be done easily.\nMigrating from the Angular CLI to Nx is fully automated and won't change your workspace structure. Click the button below to run the migration and convert your workspace. Make sure to commit all changes first.\n[Migrate to Nx](command:nxConsole.migrateAngularCliToNx)"
      },
      {
        "view": "nxProjects",
        "contents": "We couldn't find any projects in this workspace. \n Make sure that the proper dependencies are installed locally and refresh the workspace. \n [Refresh Workspace](command:nxConsole.refreshWorkspace)\n If you're just getting started with Nx, you can [use generators](https://nx.dev/plugin-features/use-code-generators?utm_source=nxconsole) to quickly scaffold new projects or [add them manually](https://nx.dev/reference/project-configuration?utm_source=nxconsole).",
        "when": "!nxConsole.hasWorkspaceErrors"
      },
      {
        "view": "nxProjects",
        "contents": "Nx caught one or more errors while computing your project graph. \n [View Errors](command:workbench.actions.view.problems)\n If the problems persist, you can try running `nx reset` to clear all caches and then [refresh the workspace](command:nxConsole.refreshWorkspace)\n For more information, view the [Nx Language Server logs](command:nxConsole.showNxlsLogs) and refer to the [Nx Troubleshooting Guide](https://nx.dev/troubleshooting/troubleshoot-nx-install-issues?utm_source=nxconsole) and the [Nx Console Troubleshooting Guide](https://nx.dev/recipes/nx-console/console-troubleshooting?utm_source=nxconsole).",
        "when": "nxConsole.hasWorkspaceErrors"
      },
      {
        "view": "nxCloudRecentCIPE",
        "contents": "No CI Pipeline Executions from local branches have run in the past hour. You can view all CI Pipeline Executions in the Nx Cloud application. \n [Open Nx Cloud App](command:nxCloud.openApp)",
        "when": "nxCloudView.error == false"
      },
      {
        "view": "nxCloudRecentCIPE",
        "contents": "You don't have access to this Nx Cloud workspace. \n [Login to Nx Cloud](command:nxCloud.login)",
        "when": "nxCloudView.error == authentication"
      },
      {
        "view": "nxCloudRecentCIPE",
        "contents": "An error occured while accessing the Nx Cloud API. \n [View Error Output](command:nxCloud.viewRecentError)",
        "when": "nxCloudView.error == other"
      },
      {
        "view": "nxCloudLoading",
        "contents": "Loading..."
      }
    ],
    "walkthroughs": [
      {
        "id": "nxConsole",
        "title": "Getting Started with Nx Console",
        "description": "Interacting with your Nx Workspace",
        "steps": [
          {
            "id": "nxConsole.generate",
            "title": "Generate",
            "description": "Use Nx Console to scaffold different files with [Generate](command:nx.generate.ui)",
            "media": {
              "markdown": "getting-started/1-generate.md"
            }
          },
          {
            "id": "nxConsole.run",
            "title": "Run",
            "description": "[Run](command:nx.run) Nx commands with selected options",
            "media": {
              "markdown": "getting-started/2-run.md"
            }
          },
          {
            "id": "nxConsole.commonNxCommands",
            "title": "Common Nx Commands",
            "description": "Open the [graph](command:nx.graph), run a task for [affected](command:nx.affected) projects, or [run-many](command:nx.run-many) on selected projects",
            "media": {
              "markdown": "getting-started/3-common-nx-commands.md"
            }
          },
          {
            "id": "nxConsole.projects",
            "title": "Projects",
            "description": "See all the [projects](command:nxProjects.focus) in your workspace",
            "media": {
              "markdown": "getting-started/4-projects.md"
            }
          },
          {
            "id": "nxConsole.streamlining",
            "title": "Streamlining",
            "description": "[Rerun Last Task](command:workbench.action.tasks.reRunTask) or set up custom tasks and [keybindings](command:workbench.action.openGlobalKeybindings)",
            "media": {
              "markdown": "getting-started/5-streamlining.md"
            }
          }
        ]
      }
    ],
    "views": {
      "nx-console": [
        {
          "id": "nxConsole.views.welcome",
          "name": "Welcome to Nx Console",
          "when": "!isNxWorkspace && !isAngularWorkspace",
          "contextualTitle": "Nx Console - Getting Started",
          "icon": "tree-view-icon.svg",
          "visibility": "visible"
        },
        {
          "id": "nxConsole.views.angular-welcome",
          "name": "Angular CLI Compatibility",
          "when": "isAngularWorkspace && !isNxWorkspace",
          "contextualTitle": "Nx Console Getting Started",
          "icon": "tree-view-icon.svg",
          "visibility": "visible"
        },
        {
          "id": "nxProjects",
          "name": "Projects",
          "when": "isNxWorkspace"
        },
        {
          "id": "nxCloudLoading",
          "name": "Nx Cloud",
          "when": "isNxWorkspace && nxCloudView.visible.loading"
        },
        {
          "id": "nxCloudOnboarding",
          "type": "webview",
          "name": "Nx Cloud :: CI Optimizations",
          "when": "isNxWorkspace && nxCloudView.visible.onboarding"
        },
        {
          "id": "nxCloudRecentCIPE",
          "name": "Nx Cloud :: Recent CI Pipeline Executions",
          "when": "isNxWorkspace && nxCloudView.visible.recent-cipe"
        },
        {
          "id": "nxCommands",
          "name": "Common Nx Commands",
          "when": "isNxWorkspace"
        },
        {
          "id": "nxHelpAndFeedback",
          "name": "Help and Feedback",
          "visibility": "collapsed"
        },
        {
          "id": "nxMigrate",
          "type": "webview",
          "name": "Nx Migrate ",
          "when": "isNxWorkspace"
        }
      ]
    }
  },
  "extensionDependencies": [
    "vscode.git"
  ],
  "dependencies": {
    "@napi-rs/wasm-runtime": "0.2.4"
  }
}
